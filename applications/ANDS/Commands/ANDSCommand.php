<?php


namespace ANDS\Commands;


use ANDS\Log\Log;
use ANDS\Registry\Backup\BackupRepository;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Stopwatch\Stopwatch;

class ANDSCommand extends Command
{
    private $input;
    private $output;
    public $logs = [];

    /**
     * @return mixed
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * @return mixed
     */
    public function getOutput()
    {
        return $this->output;
    }

    /**
     * @return array
     */
    public function getLogs()
    {
        return $this->logs;
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
    }

    public function setUp(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;
        initEloquent();
        Log::init();
        date_default_timezone_set('UTC');
        ProgressBar::setFormatDefinition('ands-command', '%current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s% -- %message%');
    }

    /**
     * Log if Verbose
     * @param $message
     * @param null $wrapper
     * @return null;
     */
    public function logv($message, $wrapper = null)
    {
        if ($this->isVerbose()) {
            return $this->log($message, $wrapper);
        }
        return null;
    }

    /**
     * Log if debug
     *
     * @param $message
     * @param null $wrapper
     * @return null|void
     */
    public function logd($message, $wrapper = null)
    {
        if ($this->isDebug()) {
            return $this->log($message, $wrapper);
        }
        return null;
    }

    public function log($message, $wrapper = null)
    {
        $this->logs[] = ($wrapper ? "[{$wrapper}] " : "") . $message;

        if ($this->output) {
            if ($wrapper) {
                $this->output->writeln("<$wrapper>$message</$wrapper>");
                return;
            }
            $this->output->writeln($message);
        }

        return;
    }

    public function table($rows, $headers = [])
    {
        if (!$this->output) {
            print_r($rows);
            return;
        }
        $table = new Table($this->output);
        $table->setHeaders($headers)
            ->setRows($rows)
            ->render();
    }

    public function assocTable($data) {
        if (!$this->output) {
            print_r($data);
            return;
        }

        $data = collect($data)->map(function($key, $value){
            return [$value, $key];
        })->toArray();

        $table = new Table($this->output);
        $table->setRows($data)->render();
    }

    public function isQuite()
    {
        if ($this->output) {
            return $this->output->isQuite();
        }
        return true;
    }

    public function isVerbose()
    {
        if ($this->output) {
            return $this->output->isVerbose();
        }

        return true;
    }

    public function isDebug()
    {
        if ($this->output) {
            return $this->output->isDebug();
        }

        return true;
    }

    /**
     * @param $activity
     * @param $closure
     */
    public function timedActivity($activity, $closure)
    {
        $this->log("$activity started");
        $stopwatch = new Stopwatch();
        $stopwatch->start('event');
        call_user_func($closure);
        $event = $stopwatch->stop('event');
        $second = $event->getDuration() / 1000;
        $megaBytes = $event->getMemory() / 1000000;
        $this->log("\n$activity completed. duration: {$second}s. Memory Usage: {$megaBytes} MB");
    }
}