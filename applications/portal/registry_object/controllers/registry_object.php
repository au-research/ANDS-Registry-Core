<?php

/**
 * Class Registry_object
 */
class Registry_object extends MX_Controller {

	private $components = array();

	/**
	 * Viewing a single registry object
	 * @return HTML generated by view
	 * @internal param $_GET ['id'] $_GET['slug']  $_GET['any'] $_GET['key']parsed through the dispatcher
	 */
	function view(){

		$this->load->library('blade');

		//Setup the variables
        $ro = null;
        $id = $this->input->get('id');
        $slug = $this->input->get('slug');
        $key = $this->input->get('key');
        $any = $this->input->get('any');
        $useCache = $this->input->get('useCache') == 'no' ? false : true;


        //If there's a single value to find, is id if numeric, otherwise it's slug
        if ($any) {
            if(is_numeric($any)) {
                $id = $any;
            } else {
            	$slug = $any;
            }
        }

        //If an ID is provided
        //view/{id} => redirect to {slug}/{id}
        if ($id) {
            $ro = $this->ro->getByID($id, null, $useCache);
            if ($ro && $ro->prop['status'] == 'success' && (!$slug || $slug != $ro->prop['core']['slug'])) {
                redirect($ro->prop['core']['slug'].'/'.$id);
            }
        }

        //If a slug is provided
        //view/{slug} => redirect to {slug}/{id}
        //if there are multiple records => redirect to a search page
        if((!$ro || $ro->prop['status'] == 'error') && $slug){
            $ro = $this->ro->getBySlug($slug, null, $useCache);
            if ($ro == 'MULTIPLE') {
                redirect('search/#!/slug='.$slug);
            }
            if ($ro && $ro->prop['status'] == 'success') {
                redirect($slug.'/'.$ro->prop['core']['id']);
            }
        }

        //If a key is provided
        //view/?key={key} => redirect to {slug}/{id}
        if((!$ro || $ro->prop['status'] == 'error') && $key) {
            $ro = $this->ro->getByKey($key, $useCache);
            if($ro && $ro->prop['status'] == 'success'){
                redirect($ro->prop['core']['slug'].'/'.$ro->prop['core']['id']);
            }
        }

        //Decide whethere to show the duplicate identifier
        $show_dup_identifier_qtip = true;
        if ($this->input->get('fl') !== false) {
            $show_dup_identifier_qtip = false;
        }
        $fl = '?fl';


        if ($ro && $ro->prop['status'] == 'success') {
        	//Found the record, handle rendering of normal view page

        	//Setup the common variables
            $banner = asset_url('images/collection_banner.jpg', 'core');
            $theme = ($this->input->get('theme') ? $this->input->get('theme') : '2-col-wrap');
            $logo = $this->getLogo($ro->core['group']);
            $group_slug = url_title($ro->core['group'], '-', true);

            //Depends on the class of the record, show different view
            switch($ro->core['class']){
                case 'collection':
                    $render = 'registry_object/view';
                    break;
                case 'activity':
                    $render = 'registry_object/activity';
                    $theme = ($this->input->get('theme') ? $this->input->get('theme') : 'activity');
                    $banner =  asset_url('images/activity_banner.jpg', 'core');
                    break;
                case 'party':
                    $render = 'registry_object/party';
                    $theme = ($this->input->get('theme') ? $this->input->get('theme') : 'party');
                    break;
                case 'service':
                    $render = 'registry_object/service';
                    $theme = ($this->input->get('theme') ? $this->input->get('theme') : 'service');
                    break;
                default:
                    $render = 'registry_object/view';
                    break;
            }

            //Record a successful view only if the record is PUBLISHED
            //DRAFT Preview are not recorded
            if($ro->core['status'] == 'PUBLISHED') {
                $ro->event('viewed');
                ulog_terms(
                    array(
                        'event' => 'portal_view',
                        'roid' => $ro->core['id'],
                        'roclass' => $ro->core['class'],
                        'dsid' => $ro->core['data_source_id'],
                        'group' => $ro->core['group'],
                        'ip' => $this->input->ip_address(),
                        'user_agent' => $this->input->user_agent()
                    ),'portal', 'info'
                );
            } else {
            	//Handle Draft
                $banner =  "http://devl.ands.org.au/workareas/leo/draft.jpg";
            }


            //Do the rendering
		    $this->blade
				->set('scripts', array('view', 'view_app', 'tag_controller'))
				->set('lib', array('jquery-ui', 'dynatree', 'qtip', 'map'))
				->set('ro', $ro)
				->set('contents', $this->components['view'])
				->set('aside', $this->components['aside'])
	            ->set('view_headers', $this->components['view_headers'])
				->set('url', $ro->construct_api_url())
				->set('theme', $theme)
	            ->set('logo',$logo)
	            ->set('isPublished', $ro->core['status'] == 'PUBLISHED')
	            ->set('banner', $banner)
	            ->set('group_slug',$group_slug)
	            ->set('fl',$fl)
	            ->set('show_dup_identifier_qtip', $show_dup_identifier_qtip)
				->render($render);

        } elseif(strpos($key, 'http://purl.org/au-research/grants/nhmrc/') !== false || strpos($key, 'http://purl.org/au-research/grants/arc/') !== false) {

        	//[SPECIAL] Handle Soft 404 for grants

        	//check if it's potentially an NHMRC key or ARC key
			if (strpos($key, 'http://purl.org/au-research/grants/nhmrc/') !== false){
                $institution = 'National Health and Medical Research Council';
                $grantIdPos = strpos($key, 'nhmrc/') + 6;
            } else{
            	$institution = 'Australian Research Council';
                $grantIdPos = strpos($key, 'arc/') + 4;
            }

            $grantId =	substr ($key, $grantIdPos);
            $purl = $key;

            $this->blade
                ->set('scripts', array('grant_form'))
                ->set('institution', $institution)
                ->set('grantId', $grantId)
                ->set('purl', $purl)
                ->render('soft_404_activity');
        } else {

        	//No Record or Error
        

            $message = ($ro ? $ro->prop['status'].NL.$ro->prop['message'] : false);

            $this->blade
                // ->set('scripts', array('view'))
                ->set('id', $this->input->get('id'))
                ->set('key', $this->input->get('key'))
                ->set('slug', $this->input->get('slug'))
                ->set('message', $message)
                ->render('soft_404');
        }
	}

	function preview() {
		$this->load->library('blade');

		if ($this->input->get('ro_id')){
			$ro = $this->ro->getByID($this->input->get('ro_id'));
			$omit = $this->input->get('omit') ? $this->input->get('omit') : false;
			$this->blade
				->set('ro', $ro)
				->set('omit', $omit)
				->render('registry_object/preview');
		} elseif($this->input->get('identifier_relation_id')) {

			//hack into the registry network and grab things
			//@todo: figure things out for yourself
			$rdb = $this->load->database('registry', TRUE);
			$result = $rdb->get_where('registry_object_identifier_relationships', array('id'=>$this->input->get('identifier_relation_id')));

			if ($result->num_rows() > 0) {
				$fr = $result->first_row();

				$ro = false;

				$pullback = false;
				//ORCID "Pull back"
				if($fr->related_info_type=='party' && $fr->related_object_identifier_type == 'orcid' && isset($fr->related_object_identifier)) {
					$pullback = $this->ro->resolveIdentifier('orcid', $fr->related_object_identifier);
					$filters = array('identifier_value'=>$fr->related_object_identifier);
					$ro = $this->ro->findRecord($filters);
				}

				$this->blade
					->set('record', $fr)
					->set('ro', $ro)
					->set('pullback', $pullback)
					->render('registry_object/preview-identifier-relation');
			}
		} else if ($this->input->get('identifier_doi')) {
			$identifier = $this->input->get('identifier_doi');
			
			//DOI "Pullback"
			$pullback = $this->ro->resolveIdentifier('doi', $identifier);
			$ro = $this->ro->findRecord(array('identifier_value'=>$identifier));

			$this->blade
				->set('ro', $ro)
				->set('pullback', $pullback)
				->render('registry_object/preview_doi');
		}
	}

	function vocab($vocab='anzsrc-for') {
		$uri = $this->input->get('uri');
		$data = json_decode(file_get_contents("php://input"), true);
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');
		$filters = $data['filters'];
		$this->load->library('vocab');
		if (!$uri) { //get top level

			if($vocab=='anzsrc-for' || $vocab=='anzsrc-seo') {
				$toplevel = $this->vocab->getTopLevel($vocab, $filters);
				echo json_encode($toplevel['topConcepts']);
			} else {
				$toplevel = $this->getSubjectsVocab($vocab, $filters);
				echo json_encode($toplevel);
			}
			
		} else {
			$r = array();
			$result = json_decode($this->vocab->getConceptDetail($vocab, $uri), true);
			if(isset($result['result']['primaryTopic']['narrower'])){
				foreach($result['result']['primaryTopic']['narrower'] as $narrower) {
					$curi = $narrower['_about'];
					$concept = json_decode($this->vocab->getConceptDetail($vocab, $curi), true);
					$concept = array(
						'notation' => $concept['result']['primaryTopic']['notation'],
						'prefLabel' => $concept['result']['primaryTopic']['prefLabel']['_value'],
						'uri' => $curi,
						'collectionNum' => $this->vocab->getNumCollections($curi, $filters),
						'has_narrower' => (isset($concept['result']['primaryTopic']['narrower']) && sizeof($concept['result']['primaryTopic']['narrower']) > 0) ? true : false
					);

					array_push($r, $concept);
				}
			}
			echo json_encode($r);
		}
	}

	function getSubjectsVocab($vocab_type, $filters) {
		$subjects_categories = $this->config->item('subjects_categories');
		$list = $subjects_categories[$vocab_type]['list'];
		$result = array();
		foreach($list as $l){
			$result_type = $this->getAllSubjectsForType($l, $filters);
			$result_list = (isset($result_type['list']) ? $result_type['list'] : array());
			$result = array_merge($result, $result_list);
		}
		$azTree = array();
		$azTree['0-9'] = array('subtree'=>array(), 'collectionNum'=>0, 'prefLabel'=>'0-9', 'notation'=>'0-9');
		foreach(range('A', 'Z') as $i) {
			$azTree[$i]=array('subtree'=>array(), 'collectionNum'=>0, 'prefLabel'=>$i, 'notation'=>url_title($i));
		}

		foreach($result as $r){
			if(ctype_alnum($r['prefLabel'])){
				$first = strtoupper($r['prefLabel'][0]);
				if(is_numeric($first)){$first='0-9';}
				$azTree[$first]['collectionNum']++;
				array_push($azTree[$first]['subtree'], $r);
			}
		}

		foreach($azTree as &$com) {
			$com['has_narrower'] = $com['collectionNum'] > 0 ? true : false;
		}

		$result = array();
		foreach($azTree as $com) {
			array_push($result, $com);
		}
		return $result;
	}

	function getAllSubjectsForType($type, $filters){
		$this->load->library('solr');
		$this->solr->setOpt('q', '*:*');
		$this->solr->setOpt('defType', 'edismax');
		$this->solr->setOpt('mm', '3');
		$this->solr->setOpt('q.alt', '*:*');
		$this->solr->setOpt('fl', '*, score');
		$this->solr->setOpt('qf', 'id^1 group^0.8 display_title^0.5 list_title^0.5 fulltext^0.2');
		$this->solr->setOpt('rows', '0');

		$this->solr->clearOpt('fq');

		if($filters){
            $this->solr->setFilters($filters);
        }else{
        	$this->solr->setBrowsingFilter();
        }
        $this->solr->addQueryCondition('+subject_type:"'.$type.'"');
		$this->solr->setFacetOpt('pivot', 'subject_type,subject_value_resolved');
		$this->solr->setFacetOpt('sort', 'subject_value_resolved');
		$this->solr->setFacetOpt('limit', '25000');
		$content = $this->solr->executeSearch();

		//if still no result is found, do a fuzzy search, store the old search term and search again
		if($this->solr->getNumFound()==0){
			if (!isset($filters['q'])) $filters['q'] = '';
			$new_search_term_array = explode(' ', $filters['q']);
			$new_search_term='';
			foreach($new_search_term_array as $c ){
				$new_search_term .= $c.'~0.7 ';
			}
			// $new_search_term = $data['search_term'].'~0.7';
			$this->solr->setOpt('q', 'fulltext:('.$new_search_term.') OR simplified_title:('.iconv('UTF-8', 'ASCII//TRANSLIT', $new_search_term).')');
			$this->solr->executeSearch();
		}

		$facets = $this->solr->getFacet();
		$facet_pivots = $facets->{'facet_pivot'}->{'subject_type,subject_value_resolved'};
		//echo json_encode($facet_pivots);
		$result = array();
		$result[$type] = array();
		
		foreach($facet_pivots as $p){
			if($p->{'value'}==$type){
				$result[$type] = array('count'=>$p->{'count'}, 'list'=>array());
				foreach($p->{'pivot'} as $pivot){
					array_push($result[$type]['list'], array('prefLabel'=>$pivot->{'value'}, 'collectionNum'=>$pivot->{'count'}, 'notation'=>url_title($pivot->{'value'}, '-', true)));
				}
				$result[$type]['size'] = sizeof($result[$type]['list']);
				// echo json_encode($p->{'pivot'});
			}
		}
		return $result[$type];
	}

	function getSubjects() {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');
		$result = array();
		foreach($this->config->item('subjects') as $subject) {
			$slug = url_title($subject['display'], '-', true);
			foreach($subject['codes'] as $code) {
				$result[$slug][] = 'http://purl.org/au-research/vocabulary/anzsrc-for/2008/'.$code;
			}
		}
		echo json_encode($result);
	}

	function resolveSubjects($vocab) {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');
		$data = json_decode(file_get_contents("php://input"), true);
		$subjects = $data['data'];

		$this->load->library('vocab');

		$result = array();

		if (is_array($subjects)) {
			foreach ($subjects as $subject) {
				$r = json_decode($this->vocab->getConceptDetail($vocab, 'http://purl.org/au-research/vocabulary/'.$vocab.'/2008/'.$subject), true);
				$result[$subject] = $r['result']['primaryTopic']['prefLabel']['_value'];
			}
		} else {
			$r = json_decode($this->vocab->getConceptDetail($vocab, 'http://purl.org/au-research/vocabulary/'.$vocab.'/2008/'.$subjects), true);
			$result[$subjects] = $r['result']['primaryTopic']['prefLabel']['_value'];
		}

		
		echo json_encode($result);
	}

	function addTag() {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');
		$data = json_decode(file_get_contents("php://input"), true);

		$data = $data['data'];
		$data['user'] = $this->user->name();
		$data['user_from'] = $this->user->authDomain();

		$ch = curl_init();
		curl_setopt($ch,CURLOPT_URL,base_url().'registry/services/rda/addTag');//post to SOLR
		curl_setopt($ch,CURLOPT_POSTFIELDS,$data);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$content = curl_exec($ch);//execute the curl
		curl_close($ch);//close the curl

		echo $content;
	}

	/**
	 * Returns the stat of a record
	 * @param  int $id
	 * @return json
	 */
	function stat($id) {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');
		$this->load->model('registry_objects', 'ro');
		$ro = $this->ro->getByID($id);
		$stats = $ro->stat();

		echo json_encode($stats);
	}

    /**
     * increment the stats for a specified type by the value given
     * Returns the stat of a record
     * @param  int $id
     * @return json
     */
    function add_stat($id) {
        header('Cache-Control: no-cache, must-revalidate');
        header('Content-type: application/json');
        set_exception_handler('json_exception_handler');
        $data = json_decode(file_get_contents("php://input"), true);
        $type = $data['data']['type'];
        $value = intval($data['data']['value']);
        $this->load->model('registry_objects', 'ro');
        $ro = $this->ro->getByID($id);
        $ro->event($type, $value);
        $stats = $ro->stat();

        echo json_encode($stats);
    }
	/**
	 * Search View
	 * Displaying the search view for the current component
	 * @return HTML 
	 */
	function search() {
		
		//redirect to the correct URL if q is used in the search query
		if($this->input->get('q')) {
			redirect('search/#!/q='.$this->input->get('q'));
		}

		$this->load->library('blade');
		$this->blade
			->set('lib', array('ui-events', 'angular-ui-map', 'google-map'))
			// ->set('scripts', array('search_app'))
			// ->set('facets', $this->components['facet'])
			->set('search', true) //to disable the global search
			->render('registry_object/search');
	}

	/**
	 * Main search function
	 * SOLR search
	 * @param bool $no_record
	 * @return json
	 * @internal param string $class class restriction
	 */
	function filter($no_log = false) {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');

		$data = json_decode(file_get_contents("php://input"), true);

		$filters = isset($data['filters']) ? $data['filters'] : false;

		// experiment with delayed response time
		// sleep(2);

		$this->load->library('solr');

		//restrict to default class
		$default_class = isset($filters['class']) ? $filters['class'] : 'collection';
		if(!is_array($default_class)) {
			$this->solr->setOpt('fq', '+class:'.$default_class);
		}

		$this->solr->setFilters($filters);

		//test
		// $this->solr->setOpt('fq', '+spatial_coverage_centres:*');

		//not recording a hit for the quick search done for advanced search
		if (!$no_log) {
			$event = array(
				'event' => 'portal_search',
				'ip' => $this->input->ip_address(),
				'user_agent' => $this->input->user_agent()
			);
			if($filters){
				$event = array_merge($event, $filters);
			}
			
			ulog_terms($event,'portal');
		}
		

		//returns this set of Facets
		
		if ($default_class=='activity')  {
			foreach($this->components['activity_facet'] as $facet){
				if ($facet!='temporal' && $facet!='spatial') $this->solr->setFacetOpt('field', $facet);
			}
		} elseif($default_class=='collection') {
			foreach($this->components['facet'] as $facet){
				if ($facet!='temporal' && $facet!='spatial') $this->solr->setFacetOpt('field', $facet);
			}
		} else {
			foreach($this->components['facet'] as $facet){
				if ($facet!='temporal' && $facet!='spatial') $this->solr->setFacetOpt('field', $facet);
			}
		}
		

		//high level subjects facet
		// $subjects = $this->config->item('subjects');
		// foreach ($subjects as $subject) {
		// 	$fq = '(';
		// 	foreach($subject['codes'] as $code) {
		// 		$fq .= 'subject_vocab_uri:("http://purl.org/au-research/vocabulary/anzsrc-for/2008/'.$code.'") ';
		// 	}
		// 	$fq.=')';
		// 	$this->solr->setFacetOpt('query', 
		// 		'{! key='.url_title($subject['display'], '-', true).'}'.$fq
		// 	);
		// }

		//temporal facet
		$this->solr
			->setFacetOpt('field', 'earliest_year')
			->setFacetOpt('field', 'latest_year')
			->setOpt('f.earliest_year.facet.sort', 'count asc')
			->setOpt('f.latest_year.facet.sort', 'count');


		//flags, these are the only fields that will be returned in the search
		$this->solr->setOpt('fl', 'id,type,title,description,group,slug,spatial_coverage_centres,spatial_coverage_polygons,administering_institution,researchers,matching_identifier_count,list_description');

		//highlighting
		$this->solr->setOpt('hl', 'true');
		$this->solr->setOpt('hl.fl', 'identifier_value_search, related_party_one_search, related_party_multi_search, related_activity_search, related_service_search, group_search, related_info_search, subject_value_resolved_search, description_value, date_to, date_from, citation_info_search');
		$this->solr->setOpt('hl.simple.pre', '&lt;b&gt;');
		$this->solr->setOpt('hl.simple.post', '&lt;/b&gt;');
		$this->solr->setOpt('hl.snippets', '2');

		//experiment hl attrs
		// $this->solr->setOpt('hl.alternateField', 'description');
		// $this->solr->setOpt('hl.alternateFieldLength', '100');
		// $this->solr->setOpt('hl.fragsize', '300');
		// $this->solr->setOpt('hl.snippets', '100');

		$this->solr->setFacetOpt('mincount','1');
		$this->solr->setFacetOpt('limit','100');
		$this->solr->setFacetOpt('sort','count');
		$result = $this->solr->executeSearch(true);

		//fuzzy search
		if($this->solr->getNumFound() == 0 && isset($filters['q'])) {
			$new_search_term_array = explode(' ', escapeSolrValue($filters['q']));
			$new_search_term='';
			foreach($new_search_term_array as $c ){
				$new_search_term .= $c.'~0.7 ';
			}
			// $new_search_term = $data['search_term'].'~0.7';
			$this->solr->setOpt('q', 'fulltext:('.$new_search_term.') OR simplified_title:('.iconv('UTF-8', 'ASCII//TRANSLIT', $new_search_term).')');
			$result = $this->solr->executeSearch(true);
			if($this->solr->getNumFound() > 0){
				$result['fuzzy_result'] = true;
			}
		}

		$result['url'] = $this->solr->constructFieldString();

		echo json_encode($result);
	}

	/**
	 * List all attribute of a registry object
	 * @param $id
	 * @return json
	 */
	function get($id, $params='') {
		header('Cache-Control: no-cache, must-revalidate');
		header('Content-type: application/json');
		set_exception_handler('json_exception_handler');

		$params = explode('-', $params);
		if(empty($params)) $params = array('core');

	

		$this->load->model('registry_objects', 'ro');
		$ro = $this->ro->getByID($id, $params);
		echo json_encode($ro->prop);
	}

    /**
     * Get the logo url for a groups logo if it exists!
     * @param $group
     * @return string
     */
    function getLogo($group) {
        $this->load->model('group/groups','group');
        $logo = $this->group->fetchLogo($group);
        return $logo;
    }

	/**
	 * Construction
	 * Defines the components that will be displayed and search for within the application
	 */
	function __construct() {
		parent::__construct();
		$this->load->model('registry_objects', 'ro');
		$this->components = array(
			'view' => array('descriptions','reuse-list','quality-list','dates-list', 'connectiontree','related-objects-list' ,'spatial-info', 'subjects-list', 'related-metadata', 'identifiers-list'),
			'aside' => array('rights-info','contact-info'),
            'view_headers' => array('title','related-parties'),
			'facet' => array('spatial','group', 'license_class', 'type', 'temporal', 'access_rights'),
			'activity_facet' => array('type', 'activity_status', 'funding_scheme', 'administering_institution', 'funders')
		);
	}
}