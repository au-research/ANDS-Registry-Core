<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="rda" version="1.5">

	<fields>
		<field name="slug" type="string" indexed="true" stored="true"/>
		<field name="id" type="string" indexed="true" stored="true" required="true"/>
		<field name="title" type="string" indexed="true" stored="true" required="true"/>
		<field name="description" type="text_en_splitting" indexed="true" stored="true" required="false"/>
		<field name="licence" type="string" indexed="true" stored="true" required="false"/>
		<field name="pool_party_id" type="string" indexed="true" stored="true" required="false"/>
		<field name="owner" type="string" indexed="true" stored="true" required="false"/>
		<field name="acronym" type="string" indexed="true" stored="true" required="false"/>

		<!-- MultiValued -->
		<field name="subjects" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="top_concept" type="text_en_splitting" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="language" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="concept" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="publisher" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="access" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="format" type="string" indexed="true" stored="true" required="false" multiValued="true"/>

		<!-- Search Fields -->
		<field name="concept_search" type="text_en_splitting" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="title_search" type="text_en_splitting" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="subject_search" type="text_en_splitting" indexed="true" stored="true" required="false" multiValued="true"/>
		<field name="publisher_search" type="text_en_splitting" indexed="true" stored="true" required="false" multiValued="true"/>

		<!-- Sort Fields -->
		<field name="title_sort" type="alphaOnlySort" indexed="true" stored="true" required="false"/>

		<field name="fulltext" type="text_en_splitting" indexed="true" stored="false" required="false" multiValued="true"/>
		<field name="text" type="text_en_splitting" indexed="true" stored="false" required="false" multiValued="true"/>
		<field name="_version_" type="string" indexed="true" stored="true" multiValued="false"/>
	</fields>


	<!-- Field to use to determine and enforce document uniqueness.
			Unless this field is marked with required="false", it will be a required field
	 -->
	<uniqueKey>id</uniqueKey>


	<copyField source="*" dest="fulltext"/>
	<copyField source="title" dest="title_search"/>
	<copyField source="title" dest="title_sort"/>
	<copyField source="subjects" dest="subject_search"/>
	<copyField source="top_concept" dest="subject_search"/>
	<copyField source="concept" dest="concept_search"/>


	<types>

		<fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

		<fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>

		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

		<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
		<fieldtype name="binary" class="solr.BinaryField"/>


		<fieldType name="random" class="solr.RandomSortField" indexed="true"/>


		<!-- A text field that only splits on whitespace for exact matching of words -->
		<fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			</analyzer>
		</fieldType>

		<!-- A general text field that has reasonable, generic
				 cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English: it
				 tokenizes with StandardTokenizer, removes English stop words
				 (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
				 finally applies Porter's stemming.  The query time analyzer
				 also applies synonyms from synonyms.txt. -->
		<fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<!-- Case insensitive stop word removal.
					add enablePositionIncrements=true in both the index and query
					analyzers to leave a 'gap' for more accurate phrase queries.
				-->
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".
				-->
		<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer type="index">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<!-- Case insensitive stop word removal.
					add enablePositionIncrements=true in both the index and query
					analyzers to leave a 'gap' for more accurate phrase queries.
				-->
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
				 but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
		<fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
				<!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
						 possible with WordDelimiterFilter in conjuncton with stemming. -->
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- Just like text_general except it reverses the characters of
	 each token, to enable more efficient leading wildcard queries. -->
		<fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>


		<!-- This is an example of using the KeywordTokenizer along
				 With various TokenFilterFactories to produce a sortable field
				 that does not include some properties of the source text
			-->
		<fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
			<analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire
						 input string is preserved as a single token
					-->
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<!-- The LowerCase TokenFilter does what you expect, which can be
						 when you want your sorting to be case insensitive
					-->
				<filter class="solr.LowerCaseFilterFactory"/>
				<!-- The TrimFilter removes any leading or trailing whitespace -->
				<filter class="solr.TrimFilterFactory"/>
				<!-- The PatternReplaceFilter gives you the flexibility to use
						 Java Regular expression to replace any sequence of characters
						 matching a pattern with an arbitrary replacement string,
						 which may include back references to portions of the original
						 string matched by the pattern.

						 See the Java Regular Expression documentation for more
						 information on pattern and replacement string syntax.

						 http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
					-->
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replacement="" replace="all"/>
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed,
				 any data added to them will be ignored outright.  -->
		<fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

		<!-- This point type indexes the coordinates as separate fields (subFields)
			If subFieldType is defined, it references a type, and a dynamic field
			definition is created matching *___<typename>.  Alternately, if
			subFieldSuffix is defined, that is used to create the subFields.
			Example: if subFieldType="double", then the coordinates would be
				indexed in fields myloc_0___double,myloc_1___double.
			Example: if subFieldSuffix="_d" then the coordinates would be indexed
				in fields myloc_0_d,myloc_1_d
			The subFields are an implementation detail of the fieldType, and end
			users normally should not need to know about them.
		 -->
		<fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

		<!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
		<fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

		<!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
			For more information about this and other Spatial fields new to Solr 4, see:
			http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
		-->
		<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType" geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees"/>

	</types>

</schema>
