<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="rda" version="1.5">

	<fields>
		
		<field name="slug" type="string" indexed="true" stored="true"/>
		<field name="id" type="string" indexed="true" stored="true" required="true"/>
		<field name="key" type="string" indexed="true" stored="true" required="true"/>
		<field name="class" type="string" indexed="true" stored="true"/>
		<field name="status" type="string" indexed="true" stored="true"/>
		<field name="logo" type="string" indexed="true" stored="true"/>
		<field name="data_source_id" type="string" indexed="true" stored="true" required="true"/>
		<field name="data_source_key" type="string" indexed="true" stored="true"/>
		<field name="contributor_page" type="string" indexed="true" stored="true"/>
		<field name="originating_source" type="string" indexed="true" stored="true"/>

		<field name="update_timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
		<field name="record_created_timestamp" type="date" indexed="true" stored="true" multiValued="false"/>
		<field name="record_modified_timestamp" type="date" indexed="true" stored="true" multiValued="false"/>

		<field name="tag" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="tag_sort" type="alphaOnlySort" indexed="true" stored="true" multiValued="true"/>
		<field name="tag_search" type="text_en_splitting" indexed="true" stored="true" multiValued="true"/>

		<field name="text" type="text_en_splitting" indexed="true" stored="false" multiValued="true"/>
		<field name="fulltext" type="text_en_splitting" indexed="true" stored="false" multiValued="true"/>
		
		<field name="group" type="string" indexed="true" stored="true"/>
		<field name="group_sort" type="alphaOnlySort" indexed="true" stored="false"/>
		<field name="group_search" type="text_en_splitting" indexed="true" stored="false"/>

		<field name="type" type="string" indexed="true" stored="true"/>
		<field name="type_sort" type="alphaOnlySort" indexed="true" stored="false"/>
		<field name="type_search" type="text_en_splitting" indexed="true" stored="false"/>

		<field name="license_class" type="string" indexed="true" stored="true" multiValued="true"/>

		<field name="title" type="string" indexed="true" stored="true"/>
		<field name="title_search" type="text_en_splitting" indexed="true" stored="false" multiValued="true"/>
		<field name="display_title" type="string" indexed="true" stored="true"/>
		<field name="list_title" type="string" indexed="true" stored="true"/>
		<field name="list_title_sort" type="alphaOnlySort" indexed="true" stored="false"/>
		<field name="simplified_title" type="string" indexed="true" stored="true"/>
		<field name="simplified_title_search" type="text_en_splitting" indexed="true" stored="false"/>
		<field name="alt_list_title" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="alt_display_title" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="alt_title_search" type="text_en_splitting" indexed="true" stored="false" multiValued="true"/>
		
		<field name="description" type="text_en_splitting" indexed="true" stored="true" multiValued="false"/>
		<field name="description_value" type="text_en_splitting" indexed="true" stored="true" multiValued="true"/>
		<field name="description_type" type="string" indexed="true" stored="true" multiValued="true"/>
	
		<field name="subject_value_resolved" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="subject_value_resolved_search" type="text_en_splitting" indexed="true" stored="true" multiValued="true"/>
		<field name="s_subject_value_resolved" type="alphaOnlySort" indexed="true" stored="false" multiValued="true"/>
		<field name="subject_value_resolved_sort" type="alphaOnlySort" indexed="true" stored="false" multiValued="true"/>
		<field name="subject_value_unresolved" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="subject_type" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="subject_vocab_uri" type="string" indexed="true" stored="true" multiValued="true"/>

		<field name="identifier_value" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="identifier_value_search" type="text_en_splitting" indexed="true" stored="false" multiValued="true"/>
		<field name="identifier_type" type="string" indexed="true" stored="true" multiValued="true"/>
		
		<field name="spatial_coverage_polygons" type="string" indexed="false" stored="true" multiValued="true"/>
		<field name="spatial_coverage_extents" type="location_rpt" indexed="true" stored="true" multiValued="true"/>
		<field name="spatial_coverage_centres" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="spatial_coverage_area_sum" type="sfloat" indexed="true" stored="true" multiValued="false"/>
		
		<field name="date_to" type="tdate" indexed="true" stored="true" multiValued="true"/>
		<field name="date_from" type="tdate" indexed="true" stored="true" multiValued="true"/>
		<field name="earliest_year" type="sint" indexed="true" stored="true" multiValued="false"/>
		<field name="latest_year" type="sint" indexed="true" stored="true" multiValued="false"/>

		<field name="related_object_key" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="related_object_id" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="related_object_class" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="related_object_type" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="related_object_display_title" type="string" indexed="true" stored="true" multiValued="true"/>
		<field name="related_object_display_title_search" type="text_en_splitting" indexed="true" stored="false"/>
		<field name="related_object_relation" type="string" indexed="true" stored="true" multiValued="true"/>

		<!-- SEARCH SORT VALUES -->
		<field name="search_base_score" type="sint" indexed="true" stored="true"/>
		<field name="_version_" type="string" indexed="true" stored="true" multiValued="false"/>

	</fields>


	<!-- Field to use to determine and enforce document uniqueness. 
			Unless this field is marked with required="false", it will be a required field
	 -->
	<uniqueKey>id</uniqueKey>


	<copyField source="*" dest="fulltext"/>

	<copyField source="tag" dest="tag_sort"/>
	<copyField source="tag" dest="tag_search"/>

	<copyField source="group" dest="group_sort"/>
	<copyField source="group" dest="group_search"/>

	<copyField source="type" dest="type_sort"/>
	<copyField source="type" dest="type_search"/>

	<copyField source="display_title" dest="title"/>
	<copyField source="display_title" dest="title_search"/>
	<copyField source="list_title" dest="title_search"/>

	<copyField source="alt_list_title" dest="alt_title_search"/>
	<copyField source="alt_display_title" dest="alt_title_search"/>

	<copyField source="list_title" dest="list_title_sort"/>
	<copyField source="simplified_title" dest="simplified_title_search"/>

	<copyField source="subject_value_resolved" dest="subject_value_resolved_search"/>
	<copyField source="subject_value_resolved" dest="s_subject_value_resolved"/>
	<copyField source="subject_value_resolved" dest="subject_value_resolved_sort"/>

	<copyField source="identifier_value" dest="identifier_value_search"/>

	<!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when
	parsing a query string that isn't explicit about the field.  Machine (non-user)
	generated queries are best made explicit, or they can use the "df" request parameter
	which takes precedence over this.
	Note: Un-commenting defaultSearchField will be insufficient if your request handler
	in solrconfig.xml defines "df", which takes precedence. That would need to be removed.
 <defaultSearchField>fulltext</defaultSearchField> -->

	<!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query parsers
	when parsing a query string to determine if a clause of the query should be marked as
	required or optional, assuming the clause isn't already marked by some operator.
	The default is OR, which is generally assumed so it is not a good idea to change it
	globally here.  The "q.op" request parameter takes precedence over this.
 <solrQueryParser defaultOperator="OR"/> -->


	<types>
		<!-- field type definitions. The "name" attribute is
			 just a label to be used by field definitions.  The "class"
			 attribute and any other attributes determine the real
			 behavior of the fieldType.
				 Class names starting with "solr" refer to java classes in a
			 standard package such as org.apache.solr.analysis
		-->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
		<fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

		<fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>

		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

		<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
		<fieldtype name="binary" class="solr.BinaryField"/>

		<!--
			Note:
			These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).
			Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last
			
			Plain numeric field types that store and index the text
			value verbatim (and hence don't correctly support range queries, since the
			lexicographic ordering isn't equal to the numeric ordering)
		-->
		<fieldType name="pint" class="solr.IntField"/>
		<fieldType name="plong" class="solr.LongField"/>
		<fieldType name="pfloat" class="solr.FloatField"/>
		<fieldType name="pdouble" class="solr.DoubleField"/>
		<fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>

		<!-- The "RandomSortField" is not used to store or search any
				 data.  You can declare fields of this type it in your schema
				 to generate pseudo-random orderings of your docs for sorting 
				 or function purposes.  The ordering is generated based on the field
				 name and the version of the index. As long as the index version
				 remains unchanged, and the same field name is reused,
				 the ordering of the docs will be consistent.  
				 If you want different psuedo-random orderings of documents,
				 for the same version of the index, use a dynamicField and
				 change the field name in the request.
		 -->
		<fieldType name="random" class="solr.RandomSortField" indexed="true"/>

		<!-- solr.TextField allows the specification of custom text analyzers
				 specified as a tokenizer and a list of token filters. Different
				 analyzers may be specified for indexing and querying.

				 The optional positionIncrementGap puts space between multiple fields of
				 this type on the same document, with the purpose of preventing false phrase
				 matching across fields.

				 For more info on customizing your analyzer chain, please see
				 http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
		 -->

		<!-- One can also specify an existing Analyzer class that has a
				 default constructor via the class attribute on the analyzer element.
				 Example:
		<fieldType name="text_greek" class="solr.TextField">
			<analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
		</fieldType>
		-->

		<!-- A text field that only splits on whitespace for exact matching of words -->
		<fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			</analyzer>
		</fieldType>

		<!-- A general text field that has reasonable, generic
				 cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English: it
				 tokenizes with StandardTokenizer, removes English stop words
				 (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
				 finally applies Porter's stemming.  The query time analyzer
				 also applies synonyms from synonyms.txt. -->
		<fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<!-- Case insensitive stop word removal.
					add enablePositionIncrements=true in both the index and query
					analyzers to leave a 'gap' for more accurate phrase queries.
				-->
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".
				-->
		<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer type="index">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<!-- in this example, we will only use synonyms at query time
				<filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
				-->
				<!-- Case insensitive stop word removal.
					add enablePositionIncrements=true in both the index and query
					analyzers to leave a 'gap' for more accurate phrase queries.
				-->
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.PorterStemFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
				 but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
		<fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
				<filter class="solr.EnglishMinimalStemFilterFactory"/>
				<!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
						 possible with WordDelimiterFilter in conjuncton with stemming. -->
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- Just like text_general except it reverses the characters of
	 each token, to enable more efficient leading wildcard queries. -->
		<fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- charFilter + WhitespaceTokenizer  -->
		<!--
		<fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
			<analyzer>
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			</analyzer>
		</fieldType>
		-->

		<!-- This is an example of using the KeywordTokenizer along
				 With various TokenFilterFactories to produce a sortable field
				 that does not include some properties of the source text
			-->
		<fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
			<analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire
						 input string is preserved as a single token
					-->
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<!-- The LowerCase TokenFilter does what you expect, which can be
						 when you want your sorting to be case insensitive
					-->
				<filter class="solr.LowerCaseFilterFactory"/>
				<!-- The TrimFilter removes any leading or trailing whitespace -->
				<filter class="solr.TrimFilterFactory"/>
				<!-- The PatternReplaceFilter gives you the flexibility to use
						 Java Regular expression to replace any sequence of characters
						 matching a pattern with an arbitrary replacement string, 
						 which may include back references to portions of the original
						 string matched by the pattern.
						 
						 See the Java Regular Expression documentation for more
						 information on pattern and replacement string syntax.
						 
						 http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
					-->
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replacement="" replace="all"/>
			</analyzer>
		</fieldType>

		<fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
			</analyzer>
		</fieldtype>

		<fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<!--
				The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
				a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
				Attributes of the DelimitedPayloadTokenFilterFactory : 
				 "delimiter" - a one character delimiter. Default is | (pipe)
	 "encoder" - how to encode the following value into a playload
			float -> org.apache.lucene.analysis.payloads.FloatEncoder,
			integer -> o.a.l.a.p.IntegerEncoder
			identity -> o.a.l.a.p.IdentityEncoder
						Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
				 -->
				<filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
			</analyzer>
		</fieldtype>

		<!-- lowercases the entire field value, keeping it as a single token.  -->
		<fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- 
			Example of using PathHierarchyTokenizerFactory at index time, so
			queries for paths match documents at that path, or in descendent paths
		-->
		<fieldType name="descendent_path" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
			</analyzer>
		</fieldType>
		<!-- 
			Example of using PathHierarchyTokenizerFactory at query time, so
			queries for paths match documents at that path, or in ancestor paths
		-->
		<fieldType name="ancestor_path" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed,
				 any data added to them will be ignored outright.  -->
		<fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

		<!-- This point type indexes the coordinates as separate fields (subFields)
			If subFieldType is defined, it references a type, and a dynamic field
			definition is created matching *___<typename>.  Alternately, if 
			subFieldSuffix is defined, that is used to create the subFields.
			Example: if subFieldType="double", then the coordinates would be
				indexed in fields myloc_0___double,myloc_1___double.
			Example: if subFieldSuffix="_d" then the coordinates would be indexed
				in fields myloc_0_d,myloc_1_d
			The subFields are an implementation detail of the fieldType, and end
			users normally should not need to know about them.
		 -->
		<fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

		<!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
		<fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

		<!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
			For more information about this and other Spatial fields new to Solr 4, see:
			http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
		-->
		<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType" geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees"/>

		<!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
				Parameters:
					defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
					precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
					providerClass:   Lets you plug in other exchange provider backend:
													 solr.FileExchangeRateProvider is the default and takes one parameter:
														 currencyConfig: name of an xml file holding exchange rates
													 solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
														 ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
														 refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
	 -->
		<fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD" currencyConfig="currency.xml"/>


	</types>

	<!-- Similarity is the scoring routine for each document vs. a query.
			 A custom Similarity or SimilarityFactory may be specified here, but 
			 the default is fine for most applications.  
			 For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
		-->
	<!--
		 <similarity class="com.example.solr.CustomSimilarityFactory">
			 <str name="paramkey">param value</str>
		 </similarity>
		-->

</schema>
